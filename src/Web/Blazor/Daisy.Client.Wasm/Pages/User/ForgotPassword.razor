@page "/forgotpassword"
@layout AuthLayout
@inject IAuthApiClient authApiClient
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ILogger<Login> logger;
@inject IHttpContextAccessor httpContextAccessor


<PageTitle>Forgot Password</PageTitle>


<div class="flex-container">
    <div class="flex-item">
        @if (!string.IsNullOrEmpty(checkEmailMessage))
        {
            <div class="alert alert-success">
                @checkEmailMessage
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Light" Text="Ok" Icon="check_circle" Size="ButtonSize.Small" Class=" mt-2 w-10" Style="text-transform: none;" Click="@(() => NavigationManager.NavigateTo("/"))" />
            </div>

        }
    </div>
    @if (popup == true)
    {
        <div class="flex-item">
            <div class="card text-center">
                <div class="card-header h5 " style="background-color:#424874;color:#B5CBDE;">Password Reset</div>
                <div class="card-body px-5">
                    <RadzenTemplateForm TItem="ForgotPasswordRequest" Data="@model" class="m-1" Submit="@(() => HandleSubmit(@model))">
                        <div class="row mb-2">
                            <div class="col-xs-12 col-sm-12 col-md-12">
                                <div class="form-group mb-2">
                                    <RadzenLabel Text="Please enter your email address" Style="font-size:15px;" />
                                    <RadzenTextBox Name="Email" @bind-Value="@model.Email" Class="w-100" Style="height:30px;" />
                                    <RadzenRequiredValidator Text="Email is required" Component="Email" />
                                    <RadzenRegexValidator Component="Email" Text="Please provide a valid email address" Pattern="@emailRegex" Popup=@popup Style="position: relative" />
                                </div>
                            </div>
                        </div>
                        <div class="mt-2 d-flex justify-content-center" style="margin: auto; width:100%; ">
                            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Light" Text="Ok" Icon="check_circle" Size="ButtonSize.Small" Class=" m-1 w-100" Style="text-transform: none;" />
                        </div>
                    </RadzenTemplateForm>
                    <div class="d-flex justify-content-between mt-2">
                        <a class="nav-link active" aria-current="page" href="login">Login</a>
                    </div>
                </div>
            </div>

        </div>

    }
    <div class="flex-item">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>

        }
    </div>
</div>



@code {

    [CascadingParameter]
    public Error? Error { get; set; }

    [Parameter]
    public ForgotPasswordRequest forgotPasswordRequest { get; set; }

    [Parameter]
    public string checkEmailMessage { get; set; } 

    [Parameter]
    public string errorMessage { get; set; }

    [Parameter]
    public int userId { get; set; } = 0;

    [Parameter]
    public string token { get; set; } = "token";

    ForgotPasswordRequest model = new();

    bool popup = true;
    string emailRegex = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";

    protected override void OnParametersSet()
    {
        try
        {
            popup = true;
            var resetUrl = NavigationManager.ToAbsoluteUri($"passwordreset/{userId}/{token}").AbsoluteUri;
            model.ResetUrl = resetUrl;
        }
        catch (Exception ex)
        {
            logger.LogInformation($"(Create User)Exception");
            logger.LogError(ex, $"(OnParameterSet)Operation failed.");
            Error.ProcessException(ex);
        }
    }

    async void HandleSubmit(ForgotPasswordRequest request)
    {
        try
        {
            var response = await authApiClient.ForgotPassword(request);
            if (!response.Successful)
            {
                errorMessage = $"{response.Message} ";
                StateHasChanged();
            }
            else
            {
                checkEmailMessage = $"{response.Message}";
                RefreshForm(request);
                popup = false;
            }
        }
        catch (Exception ex)
        {
            Error.ProcessException(ex);
        }
    }

    public void RefreshForm(ForgotPasswordRequest request)
    {
        model = new ForgotPasswordRequest();
        StateHasChanged();

    }




}
