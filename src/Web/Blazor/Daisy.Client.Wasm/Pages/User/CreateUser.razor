@page "/createuser"
@layout AuthLayout
@inject IUserApiClient userApiClient
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject DialogService DialogService
@inject ILogger<Users> logger;


<BSCard class="border-0 ">
    <BSCard CardType="CardType.Body">
        <EditForm Model="@model" OnValidSubmit="@(() => HandleRegistration(model))">
            <DataAnnotationsValidator />
            <div class="row mb-3">
                <div class="col-xs-12 col-sm-4 col-md-4">
                    <RadzenLabel Text="First Name" Style="font-size:15px;" />
                    <InputText id="firstname" class="form-control form-control-sm" @bind-Value="model.FirstName" />
                    <ValidationMessage For="@(() => model.FirstName)" style="font-size:10px;" />
                </div>
                <div class="col-xs-12 col-sm-4 col-md-4">
                    <RadzenLabel Text="Last Name" Style="font-size:15px;" />
                    <InputText Id="lastname" class="form-control form-control-sm" @bind-Value="model.LastName" />
                    <ValidationMessage For="@(() => model.LastName)" style="font-size:10px;" />
                </div>
                <div class="col-xs-12 col-sm-4 col-md-4">
                    <RadzenLabel Text="Other Names" Style="font-size:15px;" />
                    <InputText Id="othernames" class="form-control form-control-sm" @bind-Value="model.OtherNames" />
                    <ValidationMessage For="@(() => model.OtherNames)" style="font-size:10px;" />
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-xs-12 col-sm-8 col-md-8">
                    <RadzenLabel Text="Email address" Style="font-size:15px;" />
                    <InputText Id="email" class="form-control form-control-sm" @bind-Value="model.Email" />
                    <ValidationMessage For="@(() => model.Email)" style="font-size:10px;" />
                </div>
                <div class="col-xs-12 col-sm-4 col-md-4">
                    <RadzenLabel Text="Phone" Style="font-size:15px;" />
                    <InputText Id="phoneNumber" class="form-control form-control-sm" @bind-Value="model.PhoneNumber" />
                    <ValidationMessage For="@(() => model.PhoneNumber)" style="font-size:10px;" />
                </div>
            </div>

            <div class="row mb-2">
                <div class="col-xs-12 col-sm-4 col-md-4">
                    <RadzenLabel Text="Username" Style="font-size:15px;" />
                    <InputText id="username" class="form-control form-control-sm" @bind-Value="model.UserName" />
                    <ValidationMessage For="@(() => model.UserName)" style="font-size:10px;"/>
                </div>
                <div class="col-xs-12 col-sm-4 col-md-4">
                    <RadzenLabel Text="Password" Style="font-size:15px;" />
                    <InputText Id="password" class="form-control form-control-sm" @bind-Value="model.Password" />
                    <ValidationMessage For="@(() => model.Password)" style="font-size:10px;" />
                </div>
                <div class="col-xs-12 col-sm-4 col-md-4">
                    <RadzenLabel Text="Confirm Password" Style="font-size:15px;" />
                    <InputText Id="confirmpassword" class="form-control form-control-sm" @bind-Value="model.ConfirmPassword" />
                    <ValidationMessage For="@(() => model.ConfirmPassword)" style="font-size:10px;" />
                </div>
            </div>
            
            <div class="row mt-3">
                <div class="col">
                    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Save" Icon="check_circle" Size="ButtonSize.Small" class="float-end m-1 rounded-pill" Style="text-transform: none;" />

                    <RadzenButton ButtonType="ButtonType.Reset" ButtonStyle="ButtonStyle.Primary" Text="Cancel" Icon="highlight_off" Size="ButtonSize.Small" Variant="Variant.Outlined" Style="text-transform: none;" class="float-end m-1 rounded-pill" Click=@OnCancel />

                    <RadzenButton ButtonType="ButtonType.Reset" ButtonStyle="ButtonStyle.Light" Shade="Shade.Darker" Text="Reset" Icon="refresh" Size="ButtonSize.Small" class=" m-1 rounded-pill" Style="text-transform: none;" />
                </div>
            </div>
        </EditForm>
    </BSCard>
</BSCard>



@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>

    <div class="d-flex justify-content-center">
        <RadzenCard>
            @foreach (var error in Errors)
            {
                <p>@error</p>
            }
        </RadzenCard>
    </div>

}


@code {

    [CascadingParameter]
    public Error? Error { get; set; }

    private EditContext editContext;

    [Parameter]
    public CreateUserRequest? CreateUserRequest { get; set; }

    public CreateUserRequest model = new CreateUserRequest();


    private bool ShowErrors;
    private IEnumerable<string>? Errors;


    protected override void OnParametersSet()
    {
        try
        {
            model = CreateUserRequest;

            model.FirstName = CreateUserRequest.FirstName;
            model.LastName = CreateUserRequest.LastName;
            model.OtherNames = CreateUserRequest.OtherNames;
            model.Email = CreateUserRequest.Email;
            model.PhoneNumber = CreateUserRequest.PhoneNumber;
            model.UserName = CreateUserRequest.UserName;
            model.Password = CreateUserRequest.Password;
            model.ConfirmPassword = CreateUserRequest.ConfirmPassword;
        }
        catch(Exception ex)
        {
            logger.LogInformation($"(Create User)Exception");
            logger.LogError(ex, $"(OnParameterSet)Operation failed.");
            OnCancel();
            Error.ProcessException(ex);
        }
    }

    private async Task HandleRegistration(CreateUserRequest request)
    {
        try
        {
            ShowErrors = false;
            var result = await userApiClient.CreateUser(request);
            if (!result.Successful)
            {
                logger.LogError($"{nameof(CreateUser)}|Error creating user", Errors);

                ShowErrors = true;
                Errors = result.Errors;

                await DialogService.Alert("Failed - Could not create user", $"{DialogExtensions.successHeader}", new AlertOptions() { Height = "200px", OkButtonText = "Ok", CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true });

            }
            else
            {
                logger.LogInformation($"(Create User)Succesful.");
                DialogService.Close(request);
                await DialogService.Alert("User Created Successfully", $"{DialogExtensions.successHeader}", new AlertOptions() {Height = "200px", OkButtonText = "Ok", CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true });

            }

        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"{nameof(CreateUser)}|Error creating user");
            Error.ProcessException(ex);
        }

    }

    void OnCancel()
    {
        DialogService.Close(model);
    }


}