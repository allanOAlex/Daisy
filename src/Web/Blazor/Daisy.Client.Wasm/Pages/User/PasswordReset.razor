@page "/passwordreset"
@inject IJSRuntime JS;
@layout AuthLayout
@inject IAuthApiClient authApiClient
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject ILogger<Login> logger;

<PageTitle>Password Reset</PageTitle>



@if (!string.IsNullOrEmpty(errorMessage))
{
    <RadzenCard>
        <div class="alert alert-success">@successMessage</div>
    </RadzenCard>
}

<div class="col-lg-4 offset-lg-4 d-flex p-3">
    <RadzenCard class="d-flex m-5 p-0 rz-border-radius-4 rz-shadow-10" Style="width: 100%; flex-direction: column; overflow: hidden; ">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 p-3" style="text-align: center; background-color:#424874 !important; color:#B5CBDE;">
            <RadzenText TextStyle="TextStyle.DisplayH6" TagName="TagName.H2" Class="rz-color-white mb-0">Password Reset</RadzenText>
        </RadzenCard>
        <RadzenCard Class="rz-shadow-0 p-4">
            <RadzenTemplateForm TItem="ResetPasswordRequest" Data=@model Submit="@(() => ResetPassword(@model))" Action="/">
                <div class="mb-3">
                    <RadzenLabel Text="New Password" Style="font-size:15px;" />
                    <RadzenTextBox Name="Password" @bind-Value="@model.Password" Class="w-100" Style="height:30px;" />
                    <RadzenRequiredValidator Text="Password is required" Component="Password" />
                    <RadzenRegexValidator Component="Password" Text="Value must contain 3 or more alphanumeric characters" Pattern="@alphanumericRegex" Popup=@popup Style="position: relative" />
                </div>
                <div class="mb-3">
                    <RadzenLabel Text="Confirm Password" Style="font-size:15px;" />
                    <RadzenTextBox Name="ConfirmPassword" @bind-Value="@model.Password" Class="w-100" Style="height:30px;" />
                    <RadzenRequiredValidator Text="Password is required" Component="ConfirmPassword" />
                    <RadzenRegexValidator Component="ConfirmPassword" Text="Value must contain 3 or more alphanumeric characters" Pattern="@alphanumericRegex" Popup=@popup Style="position: relative" />
                </div>
                <div class="mb-3">
                    <div class="row">
                        <div class="col">
                            <RadzenButton ButtonType="ButtonType.Reset" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Light" Text="Cancel" Icon="highlight_off" Size="ButtonSize.Small" Class="float-end m-1 w-100" Style="text-transform: none;" Click=@GoBack />
                        </div>
                        <div class="col">
                            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Reset" Icon="check_circle" Size="ButtonSize.Small" Class="float-end m-1 w-100" Style="text-transform: none;" />
                        </div>
                    </div>
                </div>
                
            </RadzenTemplateForm>
        </RadzenCard>
    </RadzenCard>
</div>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <RadzenCard>
        <div class="alert alert-danger">@errorMessage</div>
    </RadzenCard>
}



@code {

    [CascadingParameter]
    public Error? Error { get; set; }

    ResetPasswordRequest model = new ResetPasswordRequest();

    string alphanumericRegex = @"^[a-zA-Z0-9 _@./#&+-]{3,}$";
    bool popup;
    bool checkBoxValue;
    string errorMessage = "";
    string successMessage = "";


    async void ResetPassword(ResetPasswordRequest request)
    {
        try
        {
            var response = await authApiClient.ResetPassword(request);
            if (!response.Successful)
            {
                errorMessage = $"{response.Message} ";
                return;
            }
            else
            {
                successMessage = $"{response.Message} ";
                //await DialogService.Alert("Password reset successful", $"{DialogExtensions.successHeader}", new AlertOptions() {Height = "200px", OkButtonText = "Ok", CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true });
                //NavigationManager.NavigateTo("/login", true);
            }
        }
        catch (Exception ex)
        {
            Error.ProcessException(ex);
        }
    }

    public async void GoBack()
    {
        await JS.InvokeVoidAsync("GoBack");
    }

    private async Task NavigateTo()
    {
        await JS.InvokeVoidAsync("eval", "window.location.href = '/'");
    }

    public async void Login()
    {
        NavigationManager.NavigateTo("/login", true);
    }
    
}
