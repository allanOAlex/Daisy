@page "/passwordreset/{userId}/{Token}"
@inject IJSRuntime JS;
@layout AuthLayout
@inject IAuthApiClient authApiClient
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject ILogger<Login> logger
@inject LinkGenerator LinkGenerator

<PageTitle>Password Reset</PageTitle>



<div class="flex-container">
    <div class="flex-item">
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">
                @successMessage
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Light" Text="Ok" Icon="check_circle" Size="ButtonSize.Small" Class=" mt-2 w-10" Style="text-transform: none;" Click="@(() => NavigationManager.NavigateTo("/login"))" />
            </div>

        }
    </div>
    <div class="flex-item">
        <div class="card text-center">
            <div class="card-header h5 " style="background-color:#424874;color:#B5CBDE;">Password Reset</div>
            <div class="card-body px-5">
                <RadzenTemplateForm TItem="ResetPasswordRequest" Data="@model" class="m-1" Submit="@(() => ResetPassword(@model))">
                    <div class="row mb-2">
                        <div class="col-xs-12 col-sm-4 col-md-6">
                            <div class="form-group mb-2">
                                <RadzenLabel Text="New Password" Style="font-size:15px;" />
                                <RadzenTextBox Name="Password" @bind-Value="@model.Password" Class="w-100" Style="height:30px;" />
                                <RadzenRequiredValidator Text="Password is required" Component="Password" />
                                <RadzenRegexValidator Component="Password" Text="@passwordErrorMessage" Pattern="@passwordRegex" Popup=@popup Style="position: relative" />
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-4 col-md-6">
                            <div class="form-group mb-2">
                                <RadzenLabel Text="Confirm Password" Style="font-size:15px;" />
                                <RadzenTextBox Name="ConfirmPassword" @bind-Value="@model.PasswordConfirm" Class="w-100" Style="height:30px;" />
                                <RadzenRequiredValidator Text="Password is required" Component="ConfirmPassword" />
                                <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(model.PasswordConfirm)) Value=@model.Password Component="ConfirmPassword" Text="Passwords should match" Popup=@popup Style="position: relative" />
                            </div>
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-xs-12 col-sm-12 col-md-12">
                            <div class="form-group mb-2">
                                <RadzenLabel Text="Reset Key" Style="font-size:15px;" />
                                <RadzenTextArea Name="Token" @bind-Value="@model.Token" Class="w-100 h-50" />
                                <RadzenRequiredValidator Text="Password reset token is required" Component="Token" />
                            </div>
                        </div>
                    </div>
                    <div class="mt-2 d-flex justify-content-center" style="margin: auto; width:100%; ">
                        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Light" Text="Ok" Icon="check_circle" Size="ButtonSize.Small" Class=" m-1 w-100" Style="text-transform: none;" />
                    </div>
                </RadzenTemplateForm>
                <div class="d-flex justify-content-between mt-2">
                    <a class="nav-link active" aria-current="page" href="forgotpassword">Forgot Passsword?</a>
                </div>
            </div>
        </div>

    </div>
    <div class="flex-item">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>

        }
    </div>
</div>

@code {

    [CascadingParameter]
    public Error? Error { get; set; }

    [Parameter]
    public string? userId { get; set; }

    [Parameter]
    public string? Token { get; set; }

    CompareOperator compareOperator = CompareOperator.Equal;
    ResetPasswordRequest model = new ResetPasswordRequest();

    string alphanumericRegex = @"^[a-zA-Z0-9 _@./#&+-]{3,}$";
    string passwordRegex = @"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$";
    string passwordErrorMessage = "\n" +
        "Must have a minimum of 8 characters in length \n " +
        "Must contain at least one uppercase English letter \n" +
        "Must contain at least one lowercase English letter \n" +
        "Must contain at least one digit \n" +
        "Must contain at least one special character";
    bool popup;
    bool checkBoxValue;
    string errorMessage = "";
    string successMessage = "";


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }


    protected override void OnParametersSet()
    {
        try
        {
            popup = true;
            model.Id = int.Parse(userId);
            model.Token = Token;
        }
        catch (Exception ex)
        {
            logger.LogInformation($"(Create User)Exception");
            logger.LogError(ex, $"(OnParameterSet)Operation failed.");
            Error.ProcessException(ex);
        }
    }

    async void ResetPassword(ResetPasswordRequest request)
    {
        try
        {
            var response = await authApiClient.ResetPassword(request);
            if (!response.Successful)
            {
                errorMessage = $"{response.Message} ";
                StateHasChanged();
                return;
            }
            else
            {
                successMessage = $"{response.Message} ";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Error.ProcessException(ex);
        }
    }

    public async void GoBack()
    {
        await JS.InvokeVoidAsync("GoBack");
    }

    private async Task NavigateTo()
    {
        await JS.InvokeVoidAsync("eval", "window.location.href = '/'");
    }

    public async void Login()
    {
        NavigationManager.NavigateTo("/login", true);
    }


    
}
