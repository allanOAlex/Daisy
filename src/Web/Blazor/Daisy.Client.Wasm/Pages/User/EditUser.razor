@page "/edituser"
@inject DialogService DialogService
@inject IUserApiClient userApiClient
@inject NavigationManager navigationManager
@inject ILogger<EditUser> logger;
@attribute [Authorize]

<PageTitle>Edit User</PageTitle>

<div class="row">
    <div class="d-flex justify-content-between">
        <div class="col">
            <RadzenTemplateForm TItem="UpdateUserRequest" Data="@model" class="ms-4 hidden-scroll" style="overflow-y: scroll;">
                
                <div class="row mb-2">
                    <div class="col-xs-12 col-sm-4 col-md-4">
                        <RadzenLabel Text="First Name" Style="font-size:15px;" />
                        <RadzenTextBox Name="FirstName" @bind-Value="@model.FirstName" Class="w-100" Style="height:30px;" />
                        <RadzenRequiredValidator Text="First Name is required" Component="FirstName" />
                        <RadzenRegexValidator Component="FirstName" Text="Must contain minimum of 2 alphabetic characters" Pattern="@nameRegex" Popup=@popup Style="position: relative" />
                    </div>
                    <div class="col-xs-12 col-sm-4 col-md-4">
                        <RadzenLabel Text="Last Name" Style="font-size:15px;" />
                        <RadzenTextBox Name="LastName" @bind-Value="@model.LastName" Class="w-100" Style="height:30px;" />
                        <RadzenRequiredValidator Text="Last Name is required" Component="LastName" />
                        <RadzenRegexValidator Component="LastName" Text="Must contain minimum of 2 alphabetic characters" Pattern="@nameRegex" Popup=@popup Style="position: relative" />
                    </div>
                    <div class="col-xs-12 col-sm-4 col-md-4">
                        <RadzenLabel Text="Other Names" Style="font-size:15px;" />
                        <RadzenTextBox Name="OtherNames" @bind-Value="@model.LastName" Class="w-100" Style="height:30px;" />
                        <RadzenRequiredValidator Text="Last Name is required" Component="OtherNames" />
                        <RadzenRegexValidator Component="OtherNames" Text="Must contain minimum of 2 alphabetic characters" Pattern="@nameRegex" Popup=@popup Style="position: relative" />
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col-xs-12 col-sm-8 col-md-8">
                        <RadzenLabel Text="Email" Style="font-size:15px;" />
                        <RadzenTextBox Name="Email" @bind-Value="@model.Email" Class="w-100 " Style="height:30px;" />
                        <RadzenRequiredValidator Text="Email is required" Component="Email" />
                        <RadzenRegexValidator Component="Email" Text="Please provide a valid email address" Pattern="@emailRegex" Popup=@popup Style="position: relative" />
                    </div>
                    <div class="col-xs-12 col-sm-4 col-md-4">
                        <RadzenLabel Text="Phone" Style="font-size:15px;" />
                        <InputText Id="phoneNumber" class="form-control form-control-sm" @bind-Value="model.PhoneNumber" />
                        <ValidationMessage For="@(() => model.PhoneNumber)" style="font-size:10px;" />
                    </div>
                </div>
                <div class="row mt-5">
                    <div class="col">
                        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Update" Icon="check_circle" Size="ButtonSize.Small" class="float-end m-1 rounded-pill" Style="text-transform: none;" Click=@(() => UpdateUser(@model.Id, @model)) />
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Cancel" Icon="highlight_off" Size="ButtonSize.Small" Style="text-transform: none;" class="float-end m-1 rounded-pill" Click=@OnCancel />
                        <RadzenButton ButtonType="ButtonType.Reset" ButtonStyle="ButtonStyle.Light" Text="Reset" Icon="refresh" Size="ButtonSize.Small" class=" m-1 rounded-pill" Style="text-transform: none;" />
                    </div>
                </div>
            </RadzenTemplateForm>
        </div>

    </div>

</div>


@code {

    [CascadingParameter]
    public Error? Error { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string Image { get; set; } = "";

    [Parameter]
    public GetAllUsersResponse? GetAllUsersResponse { get; set; }

    [Parameter]
    public UpdateUserRequest? UpdateUserRequest { get; set; }

    UpdateUserRequest? model = new UpdateUserRequest();

    string chosenFileName = string.Empty;
    bool popup;
    string emailRegex = @"\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z";
    string alphanumericRegex = @"^[a-zA-Z0-9 _@./#&+-]{3,}$";
    string nameRegex = @"^[a-zA-Z]{2,}$";


    protected override void OnParametersSet()
    {
        try
        {
            Id = GetAllUsersResponse.Id;

            model = UpdateUserRequest;
            model.Id = GetAllUsersResponse.Id;
            model.UserName = GetAllUsersResponse.UserName;
            model.FirstName = GetAllUsersResponse.FirstName;
            model.LastName = GetAllUsersResponse.LastName;
            model.Email = GetAllUsersResponse.Email;
            model.PhoneNumber = GetAllUsersResponse.Phone;
        }
        catch (Exception ex)
        {
            logger.LogInformation($"(Edit User){ex}");
            logger.LogError(ex, $"(OnParameterSet)Operation failed.");
            Error.ProcessException(ex);
        }


    }

    async void UpdateUser(int Id, UpdateUserRequest request)
    {
        try
        {
            var result = await userApiClient.UpdateUser(Id, request);
            if (result.Successful == true)
            {
                logger.LogInformation($"Updating user Successful.");
                DialogService.Close(request);

                await DialogService.Alert("User updated successfully", $"{DialogExtensions.successHeader}", new AlertOptions() { OkButtonText = "Ok", CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true });

            }
            else
            {
                logger.LogError($"User update failed.");
                await DialogService.Alert($"Error updating user", $"{DialogExtensions.failureHeader}", new AlertOptions() { OkButtonText = "Ok", CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true });
            }
        }
        catch (Exception)
        {
            throw;
        }
        
    }

    void OnCancel()
    {
        DialogService.Close(model);
    }


}
